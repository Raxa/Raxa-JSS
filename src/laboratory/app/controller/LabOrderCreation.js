/**
 * Copyright 2012, Raxa
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 * 
 *  This is the controller of Laboratory Module which contains Lab order creation 
 */
Ext.define('Laboratory.controller.LabOrderCreation', {
    extend: 'Ext.app.Controller',
    id: 'Main',
    views: ['Viewport', 'Home', 'PaperEntry1', 'PaperEntry2', 'PaperEntry3', 'PaperEntry4', 'BatchApproval', 'QueueStatus', 'ReportDelivery1', 'ReportDelivery1', 'ReportDelivery2', 'ReportDelivery3', 'ReportDelivery4', 'ReportDelivery5', 'SpecimenCollection1', 'SpecimenCollection2', 'SpecimenCollection3', 'SpecimenCollection4', 'SpecimenCollection5', 'SpecimenCollection6', 'SpecimenCollection7', 'SpecimenCollection8', 'SpecimenCollection9', 'SpecimenCollection10', 'SpecimenCollection11', 'SpecimenCollection12', 'SpecimenCollection13', 'LabOrderCreation1', 'LabOrderCreation2', 'LabOrderCreation3', 'LabOrderCreation4', 'LabOrderCreation5', 'LabOrderCreation6', 'LabOrderCreation7', 'LabOrderCreation8', 'LabOrderCreation9', 'LabOrderCreation10', 'LabOrderCreation11', 'LabOrderCreation12', 'SpecimenRegistration1', 'SpecimenRegistration2', 'SpecimenRegistration3', 'SpecimenRegistration4', 'SpecimenRegistration5', 'SpecimenRegistration6', 'SpecimenRegistration7', 'SpecimenRegistration8', 'SpecimenRegistration9', 'SpecimenRegistration10', 'SpecimenRegistration11', 'SpecimenRegistration12', 'SpecimenRegistration13', 'ResultEntry1', 'ResultEntry2', 'ResultEntry3', 'ResultEntry4', 'ResultEntry5', 'ReportApproval1', 'ReportApproval2', 'ReportApproval3', 'ReportApproval4', 'LabOrderList'],

    init: function () {
        this.control({
            'LabOrderCreation11 button[action=postLabOrder]': {
                click: this.labOrderFromGrid
            },
            'LabOrderCreation2 button[action=searchPatient]': {
                click: this.searchPatient
            },
            'LabOrderCreation2': {
                activate: function () {
                    // listener on grid showing list of searched patient
                    Ext.getCmp('patientSearchCreateLabOrder').on('cellClick', function () {
                        this.selectPatient();
                    }, this)
                }
            },
            'LabOrderCreation11': {
                activate: function () {
                    // listener on labPanel which triggers on selection of labPanel and dynamically creates grids (of corresponding labPanel)
                    Ext.getCmp('PanelListLabOrderCreation11').on('cellClick', function () {
                        this.generateLabPanel();
                    }, this)
                }
            },
        })
    },

    /* This function searches all the added grids of labpanels which are to be ordered
     * After fetching the uuid of concept (of labpanel) to be added, it requests a POST Call 
     * on order (with type=lab order).
     * TO-DO: Currently all grids (of labpanels) are created under different order ids which needs
     * to be fixed. To put them in one order, we should wait for server reply after making first call
     * and then POST that laborder number
     */
    labOrderFromGrid: function () {
        length = Ext.getCmp('LabOrderCreationContainer').items.length;
        for (var i = 0; i < length; i++) {
            if (Ext.getCmp('LabOrderCreationContainer').items.items[i].xtype == 'gridpanel') {
                var labPanelUuid = Ext.getCmp('LabOrderCreationContainer').items.items[i].store.data.items[0].raw.LabPanelUuid;
                this.postLabOrder(labPanelUuid, selectedPatientUuid);
            }
        };
    },

    /* This function is called by laborderFromGrid with parameters to be POSTed to order (with type laborder)
     * TO-DO : Currently UI doesn't have urgent checkbox , which needs to be added as urgent is a compulsary 
     * field while creating laborder
     * TO-DO : Currently we have not finalised the nomenclature of laborder no. It needs to be generated by system before POSTing.
     */
    postLabOrder: function (labPanelUuid, PatientUuid) {
        var jsonLabOrder = {
            "type": "laborder",
            "urgent": false,
            "patient": PatientUuid,
            "concept": labPanelUuid
        };
        //Ajax Request to POST json Object containing laborder
        Ext.Ajax.request({
            url: LAB_HOST + '/ws/rest/v1/order',
            method: 'POST',
            disableCaching: false,
            jsonData: jsonLabOrder,
            headers: {
                "Accept": "application/json",
                "Authorization": "Basic " + window.btoa(LAB_USERNAME + ":" + LAB_PASSWORD),
                "Content-Type": "application/json"
            },
            failure: function (response) {
                console.log('Lab order for' + 'POST failed with response status' + response.status);
            },
            success: function (response) {
                console.log('Lab Paper Entry for' + 'POST successful with response status' + response.status);
                Ext.getCmp('labOrderListPaperEntry').store.load();
                Ext.getCmp('labOrderListPaperEntry4').store.load();
            }
        });
    },

    /* This function sets url of proxy of store (labPatientSearch) which is connected to grid which lists the
     *  result of patients.
     *  Query url for searching a patient is LAB_HOME/ws/rest/v1/patient?q=FirstName+LastName
     */
    searchPatient: function () {
        var l = Ext.getCmp('mainLabArea').getLayout();
        l.setActiveItem(LAB_PAGES.LAB_ORDER_PATIENT_SEARCH_RESULT.value);

        //This is to set url of store (LabPatientSearch) proxy (after checking if First / Last Name is entered or not
        if (Ext.getCmp('patientFirstNameLabOrderCreation11').value) {
            var searchPatientName = Ext.getCmp('patientFirstNameLabOrderCreation11').value;
        };

        if (Ext.getCmp('patientLastNameLabOrderCreation11').value) {
            var searchPatientName = Ext.getCmp('patientLastNameLabOrderCreation11').value;
        };

        if (Ext.getCmp('patientFirstNameLabOrderCreation11').value && Ext.getCmp('patientLastNameLabOrderCreation11').value) {
            var searchPatientName = Ext.getCmp('patientFirstNameLabOrderCreation11').value + '+' + Ext.getCmp('patientLastNameLabOrderCreation11').value;
        };
        Ext.getCmp('patientSearchCreateLabOrder').store.getProxy().url = LAB_HOME + '/ws/rest/v1/patient?q=' + searchPatientName + '&v=full';
        Ext.getCmp('patientSearchCreateLabOrder').store.load();
    },

    /* This function is triggered after patient is selected from grid (patientSearchCreateLabOrder) in LabOrderCreation3 showing list 
     * of searched patient, query of which was entered in LabOrderCreation2
     */
    selectPatient: function () {
        var grid = Ext.getCmp('patientSearchCreateLabOrder');
        var pos = grid.getSelectionModel().selected.length;
        selectedPatientUuid = grid.getSelectionModel().lastSelected.data.PatientUuid;
        selectedPatientName = grid.getSelectionModel().lastSelected.data.PatientName;
        Ext.getCmp('PatientNameLabOrderCreation11').setValue(selectedPatientName);

        //Move to final page which shows Lab Panels to be added to the laborder
        var l = Ext.getCmp('mainLabArea').getLayout();
        l.setActiveItem(LAB_PAGES.LAB_ORDER_CREATION.value);
    },

    /* This function creates grid dynamically based on which LabPanel is clicked by user.
     */
    generateLabPanel: function () {

        var grid = Ext.getCmp('PanelListLabOrderCreation11');
        selectedLabPanel = grid.getSelectionModel().lastSelected.data.Section;
        selectedLabPanelUuid = grid.getSelectionModel().lastSelected.data.PanelUuid;

		//Check if there is a lab investigation in the view with a same name
        var duplicate = false;
        var lengthOfItems = Ext.getCmp('LabOrderCreationContainer').items.length;
        for (var i = 0; i < lengthOfItems; i++) {
            if (Ext.getCmp('LabOrderCreationContainer').items.items[i].xtype == 'gridpanel') {
                if (Ext.getCmp('LabOrderCreationContainer').items.items[i].store.data.items[0].raw.LabPanelUuid == selectedLabPanelUuid) {
                    duplicate = true;
                    break;
                }
            }
        };
        
        //Grid is generated only if grid for same investigation is not in the view
        if (!duplicate) {
            Ext.getCmp('LabOrderCreationContainer').add({
                xtype: 'gridpanel',
                margin: 10,
                autoScroll: true,
                title: selectedLabPanel,
                columnLines: true,
                columns: [{
                    xtype: 'gridcolumn',
                    dataIndex: 'Specimen',
                    text: 'Specimen Type',
                    width: 170,
                }, {
                    xtype: 'gridcolumn',
                    text: 'Specimen Role'
                }, {
                    xtype: 'gridcolumn',
                    text: 'Client specimen Id'
                }, {
                    xtype: 'datecolumn',
                    text: 'Lab Speciment Id'
                }],
                viewConfig: {

                },
                store: new Ext.data.Store({
                    fields: [{
                        name: 'Specimen',
                        type: 'string',
                    }, {
                        name: 'SpecimenUuid',
                        type: 'string'
                    }, {
                        name: 'LabPanel',
                        type: 'string'
                    }, {
                        name: 'LabPanelUuid',
                        type: 'string'
                    }],
                    autoLoad: true,
                    data: [{
                        Specimen: grid.getSelectionModel().selected.items[0].raw.analysisSpecimenTypeConcept.display,
                        SpecimenUuid: grid.getSelectionModel().selected.items[0].data.PanelUuid,
                        LabPanel: selectedLabPanel,
                        LabPanelUuid: selectedLabPanelUuid,
                    }]
                }),
                displayField: 'value',
                forceSelection: true,
                closable: true,
                dockedItems: [{
                    xtype: 'toolbar',
                    dock: 'top',
                    defaults: {
                        minWidth: 50
                    },
                    items: [{
                        xtype: 'component',
                        flex: 1
                    }, {
                        xtype: 'button',
                        text: 'Comment'
                    }, ]
                }]
            });
        } else {
        Ext.Msg.alert(selectedLabPanel + ' is already added in the laborder') 
        }
    }
});
